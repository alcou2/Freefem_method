include "getARGV.idp"

int nerr=0; 

real rhof = getARGV("-rhof",1e0); // Fluid density
real nuf = getARGV("-nuf",0.01); // Fluid viscosity
real U= getARGV("-U",1);
real L = getARGV("-L",2);
real h = getARGV("-h",0.5);
real hp = getARGV("-hp",0.02);
int nH = getARGV("-nH",2);

//include "./flag_geo.edp"

mesh Thf = readmesh("./meshes/fluidMeshFF"+nH+".msh");
//mesh Ths = readmesh("./meshes/solidMeshFFInf.msh");

// 1: Plate free surface
// 2: Plate fixed end
// 3: Inlet upper
// 4: Inlet lower
// 5: Outlet
// 6: Walls

//plot(Thf);



//  operator 
macro div(u1,u2) (dx(u1)+dy(u2))//
macro grad(u1,u2) [dx(u1),dy(u2)]//
macro ugrad(u1,u2,v) (u1*dx(v)+u2*dy(v)) //
macro Ugrad(u1,u2,v1,v2) [ugrad(u1,u2,v1),ugrad(u1,u2,v2)]//

bool adapt=0; // do adap or not 
bool dplot=0; // debug plot 

real[int] Reynold=[10,20,30,50,100];
//real[int] Reynold=[10,30,50,100,250,500,750,1000];

//real[int] Reynold=[10,20,30,40,50,60,70,80,90,100,125,175,200,225,250,275,300,325,350,375,400,425,450,475,500,550,600,650,700,750,800,850,900,950,1000];
//real[int] Reynold=[10,20,30,40,50,60,70,80,90,100,125,175,200,225,250];


// stop test for Newton 
real eps=1e-6;


// inlet B.C. 

func gup = 1.5*( ((h-y)*(y-hp/2))/((h-hp/2)/2)^2 );
func glow = 1.5*( ((-h-y)*(y+hp/2))/((h-hp/2)/2)^2 );

//real rhof = 1.;


fespace Xh(Thf,P2);
fespace Mh(Thf,P1);
fespace XMh(Thf,[P2,P2,P1]);
XMh [u1,u2,p];
XMh [v1,v2,q]; 
XMh [up1,up2,pp];


solve Stokes ([u1,u2,p],[v1,v2,q],solver=UMFPACK) =
    int2d(Thf)( ( dx(u1)*dx(v1) + dy(u1)*dy(v1)
            +  dx(u2)*dx(v2) + dy(u2)*dy(v2) )
            + p*q*(0.000001) 
            - p*div(v1,v2)-q*div(u1,u2)
           )
  + on(3,u1=gup,u2=0)
  + on(4,u1=glow,u2=0)
  + on(1,6,7,u1=0,u2=0);

 Xh uu1=u1,uu2=u2;  
//plot(coef=0.2,cmm="Stokes [u1,u2] et p  ",p,[uu1,uu2],wait=0);
//plot(coef=0.2,cmm="Stokes  p  ",p,wait=0);


//
// To build the matrix for the linear system in Newton method
//
// this is the matrix that multiply the increment, dF
//
varf   vDNS ([u1,u2,p],[v1,v2,q]) =
    int2d(Thf)(
               nuf * ( dx(u1)*dx(v1) + dy(u1)*dy(v1)
                     +dx(u2)*dx(v2) + dy(u2)*dy(v2)
                    )
            + p*q*1e-8// stabilization term 
            - p*(dx(v1)+dy(v2))
            - (dx(u1)+dy(u2))*q
            + rhof * Ugrad(u1,u2,up1,up2)'*[v1,v2] 
            + rhof * Ugrad(up1,up2,u1,u2)'*[v1,v2]
           )
  + on(1,3,4,6,7,u1=0,u2=0) 
;
//
// To build right hand side for the linear system in Newton method
//
varf   vNS ([u1,u2,p],[v1,v2,q]) =
    int2d(Thf)(       
               -nuf * ( dx(up1)*dx(v1) + dy(up1)*dy(v1)
                     +dx(up2)*dx(v2) + dy(up2)*dy(v2) 
                    )
            + pp*q*1e-8// stabilization term 
            + pp*(dx(v1)+ dy(v2))
            + (dx(up1)+ dy(up2))*q
            - rhof * Ugrad(up1,up2,up1,up2)'*[v1,v2]
            )
  + on(1,3,4,6,7,u1=0,u2=0) 
  ;
//
// Continuation on Reynolds number
//
// Compute with one Rey.
// If convergence, use solution as initial data and increase Rey
//
for(int krey=0;krey<Reynold.n;++krey)
  { 
    real re=Reynold[krey];
    real lerr=0.01;

    for(int step=0;step<(adapt?2:1) ;step++)
      {
     if(adapt)
     {
	  Thf=adaptmesh(Thf,[u1,u2],p,abserror=1,cutoff=1e-5,err=lerr,nbvx=100000,hmin=0.01);
	  //if(dplot) plot(Thf,wait=0,bb=zoom);
     }
	[u1,u2,p]=[u1,u2,p];
	[up1,up2,pp]=[up1,up2,pp];

	// Newton iterations until convergence for a given Rey
	//
	for (int i=0;i<=20;i++)
	  {
	    nuf = (rhof*2*h)/re;
	    up1[]=u1[];
	    real[int] b = vNS(0,XMh); // Right hand side for the linear system
	    matrix Ans=vDNS(XMh,XMh);// Matrix for the linear system
	    set(Ans,solver=UMFPACK);// Set solver to matrix
	    real[int] w = Ans^-1*b; // Solve the system
	    u1[] += w; // Perform the update of the increment in both variables at the same time
	    cout << " iter = "<< i << "  " << w.l2 <<  " rey = " << re << endl;
	    if(w.l2<1e-6) break; 
	    // uu1=u1;uu2=u2;
	    //if(dplot) plot(coef=0.2,cmm="H="+H+" re "+re+ " [u1,u2] et p  ",p,[uu1,uu2],bb=zoom);  
	  } ;
      }
    uu1=u1;uu2=u2;

	fespace VhTestf(Thf,P2);
	VhTestf testU=u1;
	VhTestf testV=u2;
	VhTestf testP2=p;
	fespace VhTestfp(Thf,P1);
	VhTestfp testP1=p;
	//VhTestf testFx;
	
	//VhTestf testFx = (-p+2*nuf*dx(u1))*N.x+nuf*(dy(u1)+dx(u2))*N.y;
	//VhTestf testFx = (-p+2*nuf*dx(u1));
	//VhTestf testFy = nuf*(dx(u2)+dy(u1))*N.x+(-p+2*nuf*dy(u2))*N.y;

	//fespace VhTestPl(1,P2);

	//testFx = int1d(Thf,1) (

	//varf F(Fx,Fy) = 
	//	int2d(Thf) (x) +
	//	+on(1,
	//	Fx = (-p+2*nuf*dx(u1))*N.x+nuf*(dy(u1)+dx(u2))*N.y,
	//	Fy = nuf*(dx(u2)+dy(u1))*N.x+(-p+2*nuf*dy(u2))*N.y);
		
	{ofstream file("./NSresults/U"+re+".dat"); file<<testU[];}
	{ofstream file("./NSresults/V"+re+".dat"); file<<testV[];}
	{ofstream file("./NSresults/P2"+re+".dat"); file<<testP2[];}
	{ofstream file("./NSresults/P1"+re+".dat"); file<<testP1[];}
	//{ofstream file("./NSresults/Fx"+re+".dat"); file<<testFx[];}
	//{ofstream file("./NSresults/Fy"+re+".dat"); file<<testFy[];}
 

     }

assert(nerr==0); 



fespace VhTestf(Thf,P2);
VhTestf testxf=x;
VhTestf testyf=y;

{ofstream file("./NSresults/xf.dat"); file<<testxf[];}
{ofstream file("./NSresults/yf.dat"); file<<testyf[];}


